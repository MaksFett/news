[{"/usr/app/src/index.js":"1","/usr/app/src/reportWebVitals.js":"2","/usr/app/src/App.js":"3","/usr/app/src/Authorization.js":"4","/usr/app/src/Home.js":"5","/usr/app/src/Registration.js":"6","/usr/app/src/Profile.js":"7","/usr/app/src/Category.js":"8","/usr/app/src/Article.js":"9","/usr/app/src/Admin.js":"10","/usr/app/src/components/ListedArticle.js":"11","/usr/app/src/components/Header.js":"12","/usr/app/src/components/ArticleModal.js":"13","/usr/app/src/components/AuthorModal.js":"14","/usr/app/src/components/Comment.js":"15","/usr/app/src/components/PlagModal.js":"16"},{"size":345,"mtime":1723221264000,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1723221264000,"results":"19","hashOfConfig":"18"},{"size":810,"mtime":1733477147055,"results":"20","hashOfConfig":"18"},{"size":3643,"mtime":1733062009507,"results":"21","hashOfConfig":"18"},{"size":5092,"mtime":1733557826322,"results":"22","hashOfConfig":"18"},{"size":6188,"mtime":1733303437255,"results":"23","hashOfConfig":"18"},{"size":8899,"mtime":1733303392205,"results":"24","hashOfConfig":"18"},{"size":4082,"mtime":1733303365445,"results":"25","hashOfConfig":"18"},{"size":11465,"mtime":1733558828242,"results":"26","hashOfConfig":"18"},{"size":6288,"mtime":1733519781048,"results":"27","hashOfConfig":"18"},{"size":978,"mtime":1733303466885,"results":"28","hashOfConfig":"18"},{"size":4660,"mtime":1733477132765,"results":"29","hashOfConfig":"18"},{"size":9302,"mtime":1733252700528,"results":"30","hashOfConfig":"18"},{"size":3728,"mtime":1733061378227,"results":"31","hashOfConfig":"18"},{"size":5877,"mtime":1733303304605,"results":"32","hashOfConfig":"18"},{"size":4984,"mtime":1732956083669,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1e1ew0x",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/usr/app/src/index.js",[],["68","69"],"/usr/app/src/reportWebVitals.js",[],"/usr/app/src/App.js",[],"/usr/app/src/Authorization.js",[],"/usr/app/src/Home.js",[],"/usr/app/src/Registration.js",[],"/usr/app/src/Profile.js",[],"/usr/app/src/Category.js",[],"/usr/app/src/Article.js",["70","71"],"/usr/app/src/Admin.js",[],"/usr/app/src/components/ListedArticle.js",[],"/usr/app/src/components/Header.js",[],"/usr/app/src/components/ArticleModal.js",["72"],"import React, { useState, useEffect } from 'react'\r\nimport ReactModal from 'react-modal'\r\nimport { Button, CloseButton } from 'react-bootstrap'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport { Editor } from \"react-draft-wysiwyg\"\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js'\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\"\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport htmlToDraft from 'html-to-draftjs'\r\nimport ReactLoading from 'react-loading'\r\nimport axios from 'axios'\r\n\r\nconst FormEditor = ({setFieldValue, value, name, placeholder, onBlur}) => {\r\n  const [editorState, setEditorState] = useState(EditorState.createEmpty())\r\n\r\n  const prepareDraft = value => {\r\n    const draft = htmlToDraft(value)\r\n    const contentState = ContentState.createFromBlockArray(draft.contentBlocks)\r\n    const editorState = EditorState.createWithContent(contentState)\r\n    setEditorState(editorState)\r\n  }\r\n\r\n  useEffect(() => {\r\n    prepareDraft(value);\r\n  }, [])\r\n\r\n  const onEditorStateChange = editorState => {\r\n    const forFormik = draftToHtml(\r\n      convertToRaw(editorState.getCurrentContent())\r\n    )\r\n    setFieldValue(\"text\", forFormik)\r\n    setEditorState(editorState)\r\n  }\r\n\r\n  return (\r\n    <div className='bg-dark p-2'>\r\n      <Editor\r\n        editorState={editorState}\r\n        toolbarStyle={{backgroundColor: 'black'}}\r\n        wrapperStyle={{backgroundColor: 'white'}}\r\n        editorStyle={{padding: '1rem', minHeight: '15rem'}}\r\n        onEditorStateChange={onEditorStateChange}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        onBlur={onBlur}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function ArticleModal({add_modal, setaddmodal, formValues, setformValues, seterror, ArticleSchema, error, user}) {\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const add_article = (article) => {\r\n        setLoading(true)\r\n        setformValues(article)\r\n        var myParams = {data : {...article, \"author_id\": user['id']}}\r\n        axios.post('/api/main/add_article', myParams)\r\n        .then((response) => {\r\n                if (response.data === 1){\r\n                    setaddmodal(false)\r\n                    setformValues({'title': '', 'text': '<p></p>', 'category': '', 'categories': []})\r\n                    if (error !== ''){\r\n                        seterror('')\r\n                    }\r\n                }\r\n                else if (response.data === 0){\r\n                    seterror('Хотя бы одна категория должна быть указана')\r\n                } \r\n                else {\r\n                    seterror('Статья не смогла пройти проверку на плагиат. Результат - ' + response.data + '% - больше 90%')\r\n                }\r\n                setLoading(false)\r\n                console.log(response.data)\r\n            }\r\n        ).catch((error) => {\r\n            console.log(error)\r\n            setLoading(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <ReactModal isOpen={add_modal} ariaHideApp={false}>\r\n            {loading ?\r\n                <div className=\"App-loading\">\r\n                    <ReactLoading className='position-absolute top-50 start-50 translate-middle' type=\"spinningBubbles\" color=\"#2081F9\" height={150} width={150}/>\r\n                </div>\r\n            :\r\n                <div>\r\n                    <Formik initialValues={{ \"title\" : formValues['title'], \"text\": formValues['text'], \"category\" : formValues['category'], \"categories\": formValues['categories']}} \r\n                        validationSchema={ArticleSchema} onSubmit={(values) => {add_article(values)}} >\r\n                    {({ handleSubmit, handleChange, handleBlur, setFieldValue, values, touched, errors, }) => (\r\n                        <div>\r\n                            <div className='d-flex justify-content-end'>\r\n                                <CloseButton onClick={() => { seterror(''); setformValues(values); setaddmodal(false)} } />\r\n                            </div>\r\n                            <div>&nbsp;</div>\r\n                            <Form onSubmit={handleSubmit}>\r\n                                <div className='container'>\r\n                                    <div className='row'>\r\n                                        <div className='col'>\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"title\">Название статьи</label>\r\n                                                <div></div>\r\n                                                <Field className=\"col-12\" \r\n                                                    name='title' \r\n                                                    type='text' \r\n                                                    placeholder='Введите название статьи' \r\n                                                    value={values.title} \r\n                                                    onChange={handleChange} \r\n                                                    onBlur={handleBlur}/>\r\n                                                {errors.title && touched.title ? (\r\n                                                    <div style = {{color: 'red'}}>{errors.title}</div>\r\n                                                ) : (<div>&nbsp;</div>)}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='col d-flex align-items-center justify-content-end'>\r\n                                            <div className='text-end'>\r\n                                                <Button type=\"submit\">Создать статью</Button>\r\n                                                <div style = {{color: 'red'}}>{error}&nbsp;</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"categories\">Категории</label>\r\n                                        <div></div>\r\n                                        <Field className='mb-2 col-4' \r\n                                            name='category' \r\n                                            type='text' \r\n                                            placeholder='Введите категорию' \r\n                                            value={values.category} \r\n                                            onChange={handleChange} \r\n                                            onBlur={handleBlur}/>\r\n                                        <div></div>\r\n                                        <Button className='my-1' onClick={() => {\r\n                                            if (values.category !== '') {\r\n                                                setFieldValue(\"categories\", [...new Set([...values.categories, values.category])]) \r\n                                                setFieldValue(\"category\", '')\r\n                                            }\r\n                                            }}>Добавить</Button>\r\n                                        {values.categories.map((category) => \r\n                                            <Button variant=\"dark\" className='mx-1 my-1' \r\n                                                onClick={() => {setFieldValue(\"categories\", values.categories.filter((value) => value !== category))}}>\r\n                                                    {category}\r\n                                            </Button>)}\r\n                                        {errors.category && touched.category ? (\r\n                                            <div style = {{color: 'red'}}>{errors.category}</div>\r\n                                        ) : (<div>&nbsp;</div>)}\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"text\">Текст статьи</label>\r\n                                        <div></div>\r\n                                        <Field className=\"col-10\"\r\n                                            value={values.text} \r\n                                            setFieldValue={setFieldValue} \r\n                                            component={FormEditor}\r\n                                            name='text' \r\n                                            placeholder='Введите текст статьи' \r\n                                            onBlur={handleBlur}\r\n                                            onChange={handleChange}/>\r\n                                        {errors.text && touched.text ? (\r\n                                            <div style = {{color: 'red'}}>{errors.text}</div>\r\n                                        ) : (<div>&nbsp;</div>)}\r\n                                    </div>\r\n                                </div>\r\n                            </Form>\r\n                        </div>\r\n                    )}\r\n                    </Formik>\r\n                </div>\r\n            }\r\n        </ReactModal>\r\n    )\r\n}","/usr/app/src/components/AuthorModal.js",[],"/usr/app/src/components/Comment.js",[],"/usr/app/src/components/PlagModal.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":6,"column":39,"nodeType":"79","messageId":"80","endLine":6,"endColumn":44},{"ruleId":"81","severity":1,"message":"82","line":85,"column":8,"nodeType":"83","endLine":85,"endColumn":16,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":25,"column":6,"nodeType":"83","endLine":25,"endColumn":8,"suggestions":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'Badge' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'get_comments'. Either include it or remove the dependency array.","ArrayExpression",["89"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["90"],"no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [get_comments, params]",{"range":"95","text":"96"},"Update the dependencies array to be: [value]",{"range":"97","text":"98"},[3237,3245],"[get_comments, params]",[992,994],"[value]"]